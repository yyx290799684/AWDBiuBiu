 <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:hc="https://handyorg.github.io/handycontrol"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--文字按钮样式-->
    <Style x:Key="textButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource normal_text_foreground}"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" Name="PART_Background">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}"  HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HCNormalTextBoxStyle" TargetType="{x:Type hc:TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardHidden">
                            <ThicknessAnimation Duration="0" To="9,0,0,4" Storyboard.TargetProperty="Margin" Storyboard.TargetName="TextBlockError"/>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardShow">
                            <ThicknessAnimation Duration="0:0:0.2" To="9,0,0,-18" Storyboard.TargetProperty="Margin" Storyboard.TargetName="TextBlockError"/>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition MinHeight="{Binding (hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
                                <RowDefinition.Height>
                                    <Binding Path="(hc:InfoElement.ContentHeight)" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <hc:Double2GridLengthConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </RowDefinition.Height>
                            </RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBlock x:Name="TextBlockError" Foreground="{DynamicResource DangerBrush}" FontSize="12" Margin="9,0,0,4" Grid.Row="1"  VerticalAlignment="Bottom"/>
                        <DockPanel HorizontalAlignment="{Binding (hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" LastChildFill="True" Margin="{TemplateBinding Padding}" Grid.Row="0">
                            <DockPanel.Visibility>
                                <Binding Path="(hc:TitleElement.Title)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <hc:String2VisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </DockPanel.Visibility>
                            <ContentPresenter Content="{Binding (hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0">
                                <ContentPresenter.Visibility>
                                    <Binding Path="(hc:InfoElement.Necessary)" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </ContentPresenter.Visibility>
                            </ContentPresenter>
                            <TextBlock hc:TextBlockAttach.AutoTooltip="True" Margin="1,0" TextWrapping="NoWrap" Text="{Binding (hc:TitleElement.Title), RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{x:Null}" TextTrimming="CharacterEllipsis"/>
                        </DockPanel>
                        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1" SnapsToDevicePixels="True">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" Text="{Binding (hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </TextBlock.Style>
                                    <TextBlock.Visibility>
                                        <TemplateBinding Property="Text">
                                            <TemplateBinding.Converter>
                                                <hc:String2VisibilityReConverter/>
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </TextBlock.Visibility>
                                </TextBlock>
                                <ScrollViewer x:Name="PART_ContentHost" Grid.Column="0" Focusable="False" HorizontalScrollBarVisibility="Hidden" Margin="-2,0,-1,0" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Hidden" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Button x:Name="ButtonClear" Grid.Column="1" Command="hc:ControlCommands.Clear" Foreground="{Binding BorderBrush, ElementName=templateRoot}" hc:IconElement.Geometry="M7.4038057,6.4038057C7.1478834,6.4038057 6.8919611,6.5014372 6.6966991,6.6966991 6.3061748,7.0872235 6.3061748,7.7203884 6.6966991,8.1109123L10.585787,12 6.6966991,15.889088C6.3061748,16.279612 6.3061748,16.912777 6.6966991,17.303301 7.0872235,17.693825 7.7203879,17.693825 8.1109123,17.303301L12,13.414213 15.889088,17.303301C16.279612,17.693825 16.912777,17.693825 17.303301,17.303301 17.693825,16.912777 17.693825,16.279612 17.303301,15.889088L13.414213,12 17.303301,8.1109123C17.693825,7.7203884 17.693825,7.0872235 17.303301,6.6966991 16.912777,6.3061748 16.279612,6.3061748 15.889088,6.6966991L12,10.585787 8.1109123,6.6966991C7.9156504,6.5014372,7.6597281,6.4038057,7.4038057,6.4038057z M12,0C18.627417,0 24,5.3725829 24,12 24,18.627417 18.627417,24 12,24 5.3725829,24 0,18.627417 0,12 0,5.3725829 5.3725829,0 12,0z" Height="Auto" Margin="0,0,7,0" Padding="0" Visibility="Collapsed" Width="16">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                            <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                            <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                <Path Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                            </ContentControl>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                                                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <hc:SimplePanel>
                                                                    <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                        <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <Path x:Name="PathMain" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                            <ContentPresenter x:Name="ContentPresenterMain" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="6,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                                                        </StackPanel>
                                                                    </Border>
                                                                </hc:SimplePanel>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="Content" Value="{x:Null}">
                                                                        <Setter Property="Visibility" TargetName="ContentPresenterMain" Value="Collapsed"/>
                                                                    </Trigger>
                                                                    <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                                                                        <Setter Property="Visibility" TargetName="PathMain" Value="Collapsed"/>
                                                                        <Setter Property="Margin" TargetName="ContentPresenterMain" Value="0"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type ButtonBase}">
                                                            <Setter Property="Height" Value="30"/>
                                                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                            <Setter Property="Padding" Value="10,6"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type Control}">
                                                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                    <Setter Property="FontSize" Value="12"/>
                                                                    <Setter Property="FocusVisualStyle">
                                                                        <Setter.Value>
                                                                            <Style>
                                                                                <Setter Property="Control.Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate>
                                                                                            <Rectangle RadiusY="4" RadiusX="4">
                                                                                                <Rectangle.Style>
                                                                                                    <Style TargetType="{x:Type Rectangle}">
                                                                                                        <Setter Property="Margin" Value="-2"/>
                                                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                                    </Style>
                                                                                                </Rectangle.Style>
                                                                                            </Rectangle>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Opacity" Value="0.9"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Opacity" Value="0.6"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.4"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="templateRoot" Value="True">
                            <Setter Property="Border.BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="templateRoot" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ButtonClear" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="hc:InfoElement.Symbol" Value="●"/>
                <Setter Property="hc:InfoElement.ContentHeight" Value="NaN"/>
                <Setter Property="hc:InfoElement.MinContentHeight" Value="30"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition MinHeight="{Binding (hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
                                        <RowDefinition.Height>
                                            <Binding Path="(hc:InfoElement.ContentHeight)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <hc:Double2GridLengthConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </RowDefinition.Height>
                                    </RowDefinition>
                                </Grid.RowDefinitions>
                                <DockPanel HorizontalAlignment="{Binding (hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" LastChildFill="True" Margin="{TemplateBinding Padding}">
                                    <DockPanel.Visibility>
                                        <Binding Path="(hc:TitleElement.Title)" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <hc:String2VisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </DockPanel.Visibility>
                                    <ContentPresenter Content="{Binding (hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0">
                                        <ContentPresenter.Visibility>
                                            <Binding Path="(hc:InfoElement.Necessary)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ContentPresenter.Visibility>
                                    </ContentPresenter>
                                    <TextBlock hc:TextBlockAttach.AutoTooltip="True" Margin="1,0" TextWrapping="NoWrap" Text="{Binding (hc:TitleElement.Title), RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{x:Null}" TextTrimming="CharacterEllipsis"/>
                                </DockPanel>
                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1" SnapsToDevicePixels="True"/>
                                <TextBlock x:Name="Placeholder" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" Padding="1" Grid.Row="1" Text="{Binding (hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </TextBlock.Style>
                                    <TextBlock.Visibility>
                                        <TemplateBinding Property="Text">
                                            <TemplateBinding.Converter>
                                                <hc:String2VisibilityReConverter/>
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </TextBlock.Visibility>
                                </TextBlock>
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" Margin="-1,1" Padding="{TemplateBinding Padding}" Grid.Row="1" VerticalScrollBarVisibility="Hidden" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="border" Value="0.4"/>
                                    <Setter Property="Opacity" TargetName="PART_ContentHost" Value="0.4"/>
                                    <Setter Property="Opacity" TargetName="Placeholder" Value="0.4"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="PART_ContentHost" Value="True">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.BasedOn>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="MinHeight" Value="30"/>
                        <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
                        <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="AllowDrop" Value="True"/>
                        <Setter Property="Padding" Value="8,6"/>
                        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8"/>
                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" Margin="-2,0,-1,0" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Hidden" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" TargetName="border" Value="0.4"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}"/>
                                        </Trigger>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
                <Style.Triggers>
                    <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Grid Height="{Binding (hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding (hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{Binding (hc:TitleElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <DockPanel HorizontalAlignment="{Binding (hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" LastChildFill="True" Margin="{Binding (hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding (hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                                            <DockPanel.Visibility>
                                                <Binding Path="(hc:TitleElement.Title)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <hc:String2VisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </DockPanel.Visibility>
                                            <ContentPresenter Content="{Binding (hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0">
                                                <ContentPresenter.Visibility>
                                                    <Binding Path="(hc:InfoElement.Necessary)" RelativeSource="{RelativeSource TemplatedParent}">
                                                        <Binding.Converter>
                                                            <BooleanToVisibilityConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </ContentPresenter.Visibility>
                                            </ContentPresenter>
                                            <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" Text="{Binding (hc:TitleElement.Title), RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{x:Null}" TextTrimming="CharacterEllipsis"/>
                                        </DockPanel>
                                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True"/>
                                        <TextBlock x:Name="Placeholder" Grid.Column="1" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" Padding="1" Text="{Binding (hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                        </Style>
                                                    </Style.BasedOn>
                                                </Style>
                                            </TextBlock.Style>
                                            <TextBlock.Visibility>
                                                <TemplateBinding Property="Text">
                                                    <TemplateBinding.Converter>
                                                        <hc:String2VisibilityReConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </TextBlock.Visibility>
                                        </TextBlock>
                                        <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Focusable="False" HorizontalScrollBarVisibility="Hidden" Margin="-1,1" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Hidden"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" TargetName="border" Value="0.4"/>
                                            <Setter Property="Opacity" TargetName="PART_ContentHost" Value="0.4"/>
                                            <Setter Property="Opacity" TargetName="Placeholder" Value="0.4"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" SourceName="PART_ContentHost" Value="True">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}"/>
                                        </Trigger>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Width" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type hc:TextBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="StoryboardHidden">
                                    <ThicknessAnimation Duration="0" To="9,0,0,4" Storyboard.TargetProperty="Margin" Storyboard.TargetName="TextBlockError"/>
                                </Storyboard>
                                <Storyboard x:Key="StoryboardShow">
                                    <ThicknessAnimation Duration="0:0:0.2" To="9,0,0,-18" Storyboard.TargetProperty="Margin" Storyboard.TargetName="TextBlockError"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Height="{Binding (hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding (hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding (hc:TitleElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="TextBlockError" Grid.Column="1" Foreground="{DynamicResource DangerBrush}" FontSize="12" Margin="9,0,0,4"  VerticalAlignment="Bottom"/>
                                <DockPanel Grid.Column="0" HorizontalAlignment="{Binding (hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" LastChildFill="True" Margin="{Binding (hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding (hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                                    <DockPanel.Visibility>
                                        <Binding Path="(hc:TitleElement.Title)" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <hc:String2VisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </DockPanel.Visibility>
                                    <ContentPresenter Content="{Binding (hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0">
                                        <ContentPresenter.Visibility>
                                            <Binding Path="(hc:InfoElement.Necessary)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ContentPresenter.Visibility>
                                    </ContentPresenter>
                                    <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" Text="{Binding (hc:TitleElement.Title), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{x:Null}" TextTrimming="CharacterEllipsis"/>
                                </DockPanel>
                                <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
                                    <Grid SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" Text="{Binding (hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                        </Style>
                                                    </Style.BasedOn>
                                                </Style>
                                            </TextBlock.Style>
                                            <TextBlock.Visibility>
                                                <TemplateBinding Property="Text">
                                                    <TemplateBinding.Converter>
                                                        <hc:String2VisibilityReConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </TextBlock.Visibility>
                                        </TextBlock>
                                        <ScrollViewer x:Name="PART_ContentHost" Grid.Column="0" Focusable="False" HorizontalScrollBarVisibility="Hidden" Margin="-2,0,-1,0" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Hidden" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <Button x:Name="ButtonClear" Grid.Column="1" Command="hc:ControlCommands.Clear" Foreground="{Binding BorderBrush, ElementName=templateRoot}" hc:IconElement.Geometry="M7.4038057,6.4038057C7.1478834,6.4038057 6.8919611,6.5014372 6.6966991,6.6966991 6.3061748,7.0872235 6.3061748,7.7203884 6.6966991,8.1109123L10.585787,12 6.6966991,15.889088C6.3061748,16.279612 6.3061748,16.912777 6.6966991,17.303301 7.0872235,17.693825 7.7203879,17.693825 8.1109123,17.303301L12,13.414213 15.889088,17.303301C16.279612,17.693825 16.912777,17.693825 17.303301,17.303301 17.693825,16.912777 17.693825,16.279612 17.303301,15.889088L13.414213,12 17.303301,8.1109123C17.693825,7.7203884 17.693825,7.0872235 17.303301,6.6966991 16.912777,6.3061748 16.279612,6.3061748 15.889088,6.6966991L12,10.585787 8.1109123,6.6966991C7.9156504,6.5014372,7.6597281,6.4038057,7.4038057,6.4038057z M12,0C18.627417,0 24,5.3725829 24,12 24,18.627417 18.627417,24 12,24 5.3725829,24 0,18.627417 0,12 0,5.3725829 5.3725829,0 12,0z" Height="Auto" Margin="0,0,7,0" Padding="0" Visibility="Collapsed" Width="16">
                                            <Button.Style>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                    <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                        <Path Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                    </ContentControl>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type Button}">
                                                            <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                                                            <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                                        <hc:SimplePanel>
                                                                            <Border Background="{TemplateBinding Background}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                                                                <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                                    <Path x:Name="PathMain" Data="{TemplateBinding hc:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" Height="{TemplateBinding hc:IconElement.Height}" Stretch="Uniform" SnapsToDevicePixels="True" Width="{TemplateBinding hc:IconElement.Width}"/>
                                                                                    <ContentPresenter x:Name="ContentPresenterMain" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="6,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                                                                </StackPanel>
                                                                            </Border>
                                                                        </hc:SimplePanel>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="Content" Value="{x:Null}">
                                                                                <Setter Property="Visibility" TargetName="ContentPresenterMain" Value="Collapsed"/>
                                                                            </Trigger>
                                                                            <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                                                                                <Setter Property="Visibility" TargetName="PathMain" Value="Collapsed"/>
                                                                                <Setter Property="Margin" TargetName="ContentPresenterMain" Value="0"/>
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type ButtonBase}">
                                                                    <Setter Property="Height" Value="30"/>
                                                                    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                                                                    <Setter Property="Padding" Value="10,6"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                                                                    <Setter Property="BorderThickness" Value="0"/>
                                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                                    <Style.BasedOn>
                                                                        <Style TargetType="{x:Type Control}">
                                                                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                                                            <Setter Property="FontSize" Value="12"/>
                                                                            <Setter Property="FocusVisualStyle">
                                                                                <Setter.Value>
                                                                                    <Style>
                                                                                        <Setter Property="Control.Template">
                                                                                            <Setter.Value>
                                                                                                <ControlTemplate>
                                                                                                    <Rectangle RadiusY="4" RadiusX="4">
                                                                                                        <Rectangle.Style>
                                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                                <Setter Property="Margin" Value="-2"/>
                                                                                                                <Setter Property="Opacity" Value="0.6"/>
                                                                                                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                                                                <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                                                                <Setter Property="StrokeThickness" Value="2"/>
                                                                                                                <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                                                            </Style>
                                                                                                        </Rectangle.Style>
                                                                                                    </Rectangle>
                                                                                                </ControlTemplate>
                                                                                            </Setter.Value>
                                                                                        </Setter>
                                                                                    </Style>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Style.BasedOn>
                                                                </Style>
                                                            </Style.BasedOn>
                                                            <Style.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Opacity" Value="0.9"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Opacity" Value="0.6"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Opacity" Value="0.4"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Style.BasedOn>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="templateRoot" Value="0.4"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="templateRoot" Value="True">
                                    <Setter Property="Border.BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" SourceName="templateRoot" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="ButtonClear" Value="Visible"/>
                                </MultiTrigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ScrollViewer -->
    <Style x:Key="for_scrollbar"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Margin"
                Value="0,1,3,6"/>
        <Setter Property="Width"
                Value="8"/>
        <Setter Property="MinWidth"
                Value="5"/>
        <Setter Property="Opacity"
                Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Track x:Name="PART_Track"
                               IsEnabled="{TemplateBinding IsMouseOver}"
                               IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton
                                    Style="{StaticResource VerticalScrollBarPageButton}"
                                    Command="{x:Static ScrollBar.PageUpCommand}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton
                                    Style="{StaticResource VerticalScrollBarPageButton}"
                                    Command="{x:Static ScrollBar.PageDownCommand}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Background"
                        Value="Transparent"/>
                <Setter Property="Margin"
                        Value="1,0,6,1"/>
                <Setter Property="Height"
                        Value="8"/>
                <Setter Property="MinHeight"
                        Value="5"/>
                <Setter Property="Width"
                        Value="Auto"/>
                <Setter Property="Opacity"
                        Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Track x:Name="PART_Track"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                      Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                      Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="for_scrollviewer_list"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderBrush"
                Value="LightGray"/>
        <Setter Property="BorderThickness"
                Value="0"/>
        <Setter Property="PanningMode"
                Value="VerticalOnly"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}" >
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter
                                Cursor="{TemplateBinding Cursor}"
                                Margin="{TemplateBinding Padding}"
                                VirtualizingPanel.VirtualizationMode="Recycling"
                                VirtualizingPanel.IsVirtualizing="True"
                                CanContentScroll="True"
                                CanHorizontallyScroll="False"
                                CanVerticallyScroll="False"
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       HorizontalAlignment="Right"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Orientation="Vertical"
                                       Style="{StaticResource for_scrollbar}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Orientation="Horizontal"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"  
                                       Style="{StaticResource for_scrollbar}"
                                       VerticalAlignment="Bottom"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ScrollChanged">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"
                                        BeginTime="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"
                                        BeginTime="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter"
                                      SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave"
                                      SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter"
                                      SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave"
                                      SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="for_scrollviewer"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderBrush"
                Value="LightGray"/>
        <Setter Property="BorderThickness"
                Value="0"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="HorizontalScrollBarVisibility"
                Value="Disabled"/>
        <Setter Property="VerticalContentAlignment"
                Value="Top"/>
        <Setter Property="VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="PanningMode"
                Value="VerticalOnly"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}" >
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter
                                Cursor="{TemplateBinding Cursor}"
                                Margin="{TemplateBinding Padding}"
                                VirtualizingPanel.VirtualizationMode="Recycling"
                                VirtualizingPanel.IsVirtualizing="True"
                                CanContentScroll="True"
                                CanHorizontallyScroll="False"
                                CanVerticallyScroll="False"
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       HorizontalAlignment="Right"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Orientation="Vertical"
                                       Style="{StaticResource for_scrollbar}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Orientation="Horizontal"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"  
                                       Style="{StaticResource for_scrollbar}"
                                       VerticalAlignment="Bottom"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ScrollChanged">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"
                                        BeginTime="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"
                                        BeginTime="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter"
                                      SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave"
                                      SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter"
                                      SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave"
                                      SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ScrollViewer_不自动隐藏 -->
    <Style x:Key="for_scrollviewer_no_hide"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderBrush"
                Value="LightGray"/>
        <Setter Property="BorderThickness"
                Value="0"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="HorizontalScrollBarVisibility"
                Value="Disabled"/>
        <Setter Property="VerticalContentAlignment"
                Value="Top"/>
        <Setter Property="VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="PanningMode"
                Value="VerticalOnly"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}" >
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter
                                Cursor="{TemplateBinding Cursor}"
                                Margin="{TemplateBinding Padding}"
                                VirtualizingPanel.VirtualizationMode="Recycling"
                                VirtualizingPanel.IsVirtualizing="True"
                                CanContentScroll="True"
                                CanHorizontallyScroll="False"
                                CanVerticallyScroll="False"
                                ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       HorizontalAlignment="Right"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Orientation="Vertical"
                                       Style="{StaticResource for_scrollbar}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Opacity="1"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Orientation="Horizontal"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       VirtualizingPanel.IsVirtualizing="True"  
                                       Style="{StaticResource for_scrollbar}"
                                       VerticalAlignment="Bottom"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Opacity="1"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" CornerRadius="6" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Border x:Name="splitBorder"  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="2" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                            <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" Width="10" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource bar_round_button_fill_enable}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource normal_text_foreground_5}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true" HorizontalAlignment="Stretch" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup"  AllowsTransparency="true" HorizontalAlignment="Stretch"  HorizontalOffset="-10"  Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom">
                            <Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="10" Opacity="0.5" ShadowDepth="0"/>
                                </Border.Effect>
                                <ScrollViewer x:Name="DropDownScrollViewer" Margin="10,3,10,3"  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"  Style="{StaticResource for_scrollviewer}">
                                    <Border CornerRadius="6" Background="White">
                                        <Grid x:Name="grid" Margin="0,5" RenderOptions.ClearTypeHint="Enabled" >
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" Margin="0" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </Border>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                        <ContentPresenter x:Name="contentPresenter"  Margin="10,0,0,0" Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="Stretch" IsHitTestVisible="false"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" >
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border x:Name="Bd"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="5" SnapsToDevicePixels="true">
                                    <ContentPresenter Name="Cp" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="True">
                                        <Setter Property="Background" TargetName="Bd" Value="White"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="White"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="Bd" Value="#EEEEEE"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="#EEEEEE"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="TextElement.Foreground" TargetName="Cp" Value="{DynamicResource color_primary}"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter Property="TextElement.Foreground" TargetName="Cp" Value="{DynamicResource text_foreground_primary}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PlayListComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" CornerRadius="22" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Border x:Name="splitBorder"  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="2,2,20,2" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                            <Path x:Name="arrow"  VerticalAlignment="Center" Width="14" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathGeometry.Figures>
                                            <PathFigure StartPoint="7,0" IsClosed="True">
                                                <LineSegment Point="0,12" />
                                                <LineSegment Point="14,12" />
                                            </PathFigure>
                                        </PathGeometry.Figures>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource bar_round_button_fill_enable}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlayListComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource normal_text_foreground_5}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true" HorizontalAlignment="Stretch" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup"  AllowsTransparency="true" HorizontalAlignment="Stretch"  HorizontalOffset="-10"  Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Placement="Top">
                            <Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="10" Opacity="0.5" ShadowDepth="0"/>
                                </Border.Effect>
                                <ScrollViewer x:Name="DropDownScrollViewer" Margin="13,3,10,8" HorizontalAlignment="Center"  MinWidth="110"  Style="{StaticResource for_scrollviewer}">
                                    <Border CornerRadius="10" Background="White">
                                        <Grid x:Name="grid" Margin="0,10" RenderOptions.ClearTypeHint="Enabled" >
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" Margin="0" HorizontalAlignment="Stretch" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <hc:Divider Height="10" LineStroke="{DynamicResource auxiliary_line_fill}" VerticalAlignment="Top" Width="94" Margin="0,40,0,0" Opacity="1"/>
                                        </Grid>
                                    </Border>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource PlayListComboBoxToggleButton}"/>
                        <ContentPresenter x:Name="contentPresenter" Margin="20,0,0,0" Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="Stretch" IsHitTestVisible="false"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" >
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="FontSize" Value="14"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border x:Name="Bd"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="5" SnapsToDevicePixels="true">
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                        <ContentPresenter Name="Cp" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <Image Name="vip" Source="../Assets/ic_vip.png" Height="8" Margin="6,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="True">
                                        <Setter Property="Background" TargetName="Bd" Value="White"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="White"/>
                                    </Trigger>
                                    <Trigger Property="Tag" Value="VIP">
                                        <Setter Property="Background" TargetName="Bd" Value="White"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="White"/>
                                        <Setter Property="Visibility" TargetName="vip" Value="Visible"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="Bd" Value="#EEEEEE"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="#EEEEEE"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="TextElement.Foreground" TargetName="Cp" Value="{DynamicResource color_primary}"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter Property="TextElement.Foreground" TargetName="Cp" Value="{DynamicResource text_foreground_primary}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="sourceTextKindListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ItemsPanel" >
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" >
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                    <Setter Property="Background" Value="#F2F2F2"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Cursor="Hand" Height="26" Margin="5,6,0,0" CornerRadius="11" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                    <ContentPresenter Name="content" Margin="2,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" Style="{StaticResource for_scrollviewer}"  >
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Name="tb" Text="{Binding kindName}" Margin="12,2" Foreground="{DynamicResource normal_text_foreground_10}"/>
                    <DataTemplate.Triggers >
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="tb" Value="{DynamicResource color_primary}"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="tb" Value="{DynamicResource color_primary}"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>